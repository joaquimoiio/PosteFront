// Configura√ß√£o global da aplica√ß√£o
const CONFIG = {
    API_BASE: 'http://localhost:8080/api',
    PAGES: {
        dashboard: 'pages/dashboard.html',
        vendas: 'pages/vendas.html',
        despesas: 'pages/despesas.html',
        postes: 'pages/postes.html'
    }
};

// Estado global da aplica√ß√£o
const AppState = {
    currentPage: 'dashboard',
    isLoading: false,
    backendAvailable: false,
    data: {
        resumo: null,
        vendas: [],
        despesas: [],
        postes: []
    }
};

// Inicializa√ß√£o da aplica√ß√£o
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Iniciando aplica√ß√£o...');
    
    try {
        await initializeApp();
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
        showAlert('Erro ao inicializar aplica√ß√£o', 'error');
    }
});

// Fun√ß√£o principal de inicializa√ß√£o
async function initializeApp() {
    // 1. Verificar se elementos necess√°rios existem
    if (!verifyRequiredElements()) {
        console.error('‚ùå Elementos necess√°rios n√£o encontrados no DOM');
        return;
    }

    // 2. Configurar event listeners globais
    setupEventListeners();
    
    // 3. Verificar disponibilidade do backend
    AppState.backendAvailable = await checkBackendAvailability();
    
    // 4. Carregar p√°gina inicial
    await loadPage('dashboard');
    
    console.log('‚úÖ Aplica√ß√£o inicializada com sucesso');
}

// Verificar se elementos necess√°rios existem
function verifyRequiredElements() {
    const requiredElements = [
        'page-content',
        'loading-overlay',
        'alert-container'
    ];
    
    for (const elementId of requiredElements) {
        if (!document.getElementById(elementId)) {
            console.error(`‚ùå Elemento necess√°rio n√£o encontrado: ${elementId}`);
            return false;
        }
    }
    
    return true;
}

// Verificar disponibilidade do backend
async function checkBackendAvailability() {
    try {
        const response = await fetch(CONFIG.API_BASE + '/postes', {
            method: 'GET',
            timeout: 5000
        });
        
        if (response.ok) {
            console.log('‚úÖ Backend dispon√≠vel');
            return true;
        } else {
            console.warn('‚ö†Ô∏è Backend respondeu com erro:', response.status);
            return false;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Backend n√£o dispon√≠vel:', error.message);
        showAlert(
            'Backend n√£o dispon√≠vel. Verifique se o servidor est√° rodando na porta 8080.',
            'warning'
        );
        return false;
    }
}

// Configurar event listeners globais
function setupEventListeners() {
    // Navigation buttons
    document.querySelectorAll('.nav-item').forEach(button => {
        button.addEventListener('click', handleNavigation);
    });

    // Escape key para fechar modals
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeAllModals();
        }
    });

    // Handle browser back/forward
    window.addEventListener('popstate', (e) => {
        if (e.state && e.state.page) {
            loadPage(e.state.page, false);
        }
    });

    // Detectar erros de script
    window.addEventListener('error', (e) => {
        console.error('‚ùå Erro de script capturado:', e.error);
    });

    // Detectar promessas rejeitadas
    window.addEventListener('unhandledrejection', (e) => {
        console.error('‚ùå Promise rejeitada:', e.reason);
        e.preventDefault(); // Evitar que apare√ßa no console
    });
}

// Gerenciar navega√ß√£o entre p√°ginas
async function handleNavigation(event) {
    const targetPage = event.currentTarget.dataset.page;
    
    if (targetPage && targetPage !== AppState.currentPage) {
        await loadPage(targetPage);
    }
}

// Carregar p√°gina dinamicamente
async function loadPage(pageName, updateHistory = true) {
    if (AppState.isLoading) {
        console.log('‚è≥ Carregamento em andamento, ignorando nova solicita√ß√£o');
        return;
    }
    
    console.log(`üìÑ Carregando p√°gina: ${pageName}`);
    
    try {
        showLoading(true);
        
        // Atualizar estado de navega√ß√£o
        updateNavigation(pageName);
        
        // Limpar p√°gina anterior se necess√°rio
        if (AppState.currentPage !== pageName) {
            await cleanupCurrentPage();
        }
        
        // Carregar conte√∫do da p√°gina
        const pageContent = await loadPageContent(pageName);
        
        // Inserir conte√∫do
        const contentContainer = document.getElementById('page-content');
        contentContainer.innerHTML = pageContent;
        
        // Atualizar hist√≥rico do navegador
        if (updateHistory) {
            history.pushState({ page: pageName }, '', `#${pageName}`);
        }
        
        // Executar scripts espec√≠ficos da p√°gina
        await executePageScripts(pageName);
        
        AppState.currentPage = pageName;
        
        console.log(`‚úÖ P√°gina ${pageName} carregada com sucesso`);
        
    } catch (error) {
        console.error(`‚ùå Erro ao carregar p√°gina ${pageName}:`, error);
        showAlert(`Erro ao carregar p√°gina ${pageName}: ${error.message}`, 'error');
        
        // Tentar carregar p√°gina de erro ou fallback
        await loadErrorPage(error);
        
    } finally {
        showLoading(false);
    }
}

// Limpar p√°gina atual antes de carregar nova
async function cleanupCurrentPage() {
    const currentPage = AppState.currentPage;
    
    console.log(`üßπ Limpando p√°gina: ${currentPage}`);
    
    // Executar fun√ß√£o de cleanup espec√≠fica da p√°gina se existir
    const cleanupFunction = window[`cleanup${capitalize(currentPage)}`];
    if (typeof cleanupFunction === 'function') {
        try {
            await cleanupFunction();
            console.log(`‚úÖ Cleanup de ${currentPage} executado`);
        } catch (error) {
            console.error(`‚ùå Erro no cleanup de ${currentPage}:`, error);
        }
    }
    
    // Limpar timers globais
    clearPageTimers();
}

// Limpar timers da p√°gina
function clearPageTimers() {
    // Limpar intervalos e timeouts (n√∫meros altos para garantir limpeza)
    for (let i = 1; i < 1000; i++) {
        clearInterval(i);
        clearTimeout(i);
    }
}

// Carregar conte√∫do HTML da p√°gina
async function loadPageContent(pageName) {
    const pageUrl = CONFIG.PAGES[pageName];
    
    if (!pageUrl) {
        throw new Error(`P√°gina ${pageName} n√£o encontrada na configura√ß√£o`);
    }
    
    const response = await fetch(pageUrl);
    
    if (!response.ok) {
        throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
    }
    
    return await response.text();
}

// Executar scripts espec√≠ficos da p√°gina
async function executePageScripts(pageName) {
    // Remove scripts anteriores para evitar conflitos
    removePageScripts();
    
    // Carregar script espec√≠fico da p√°gina
    const scriptUrl = `js/${pageName}.js`;
    
    try {
        await loadScript(scriptUrl);
        
        // Executar fun√ß√£o de inicializa√ß√£o da p√°gina se existir
        const initFunctionName = `init${capitalize(pageName)}Page`;
        if (typeof window[initFunctionName] === 'function') {
            console.log(`üöÄ Executando ${initFunctionName}...`);
            await window[initFunctionName]();
        } else {
            console.warn(`‚ö†Ô∏è Fun√ß√£o de inicializa√ß√£o ${initFunctionName} n√£o encontrada`);
        }
        
    } catch (error) {
        console.warn(`‚ö†Ô∏è Script da p√°gina ${pageName} n√£o encontrado ou erro na execu√ß√£o:`, error);
        
        // Para p√°ginas cr√≠ticas como dashboard, tentar carregar dados b√°sicos
        if (pageName === 'dashboard') {
            await fallbackDashboardInit();
        }
    }
}

// Fallback para inicializa√ß√£o do dashboard
async function fallbackDashboardInit() {
    console.log('üîÑ Executando inicializa√ß√£o fallback do dashboard...');
    
    try {
        // Mostrar dados b√°sicos mesmo sem o script espec√≠fico
        const elementos = [
            'total-venda-postes', 'valor-total-vendas', 'total-contribuicoes-extras',
            'total-despesas', 'lucro-total'
        ];
        
        elementos.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = 'R$ 0,00';
            }
        });
        
        showAlert('Dashboard carregado em modo b√°sico', 'warning');
        
    } catch (error) {
        console.error('Erro no fallback do dashboard:', error);
    }
}

// Carregar script dinamicamente
function loadScript(src) {
    return new Promise((resolve, reject) => {
        // Verificar se o script j√° foi carregado
        if (document.querySelector(`script[src="${src}"]`)) {
            resolve();
            return;
        }
        
        const script = document.createElement('script');
        script.src = src + '?t=' + Date.now(); // Cache busting
        script.className = 'page-script';
        script.onload = resolve;
        script.onerror = () => reject(new Error(`Falha ao carregar script: ${src}`));
        document.head.appendChild(script);
    });
}

// Remover scripts espec√≠ficos de p√°ginas
function removePageScripts() {
    document.querySelectorAll('.page-script').forEach(script => {
        script.remove();
    });
}

// Atualizar estado visual da navega√ß√£o
function updateNavigation(activePage) {
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
        
        if (item.dataset.page === activePage) {
            item.classList.add('active');
        }
    });
}

// Mostrar/ocultar loading
function showLoading(show) {
    const loadingOverlay = document.getElementById('loading-overlay');
    AppState.isLoading = show;
    
    if (loadingOverlay) {
        loadingOverlay.style.display = show ? 'flex' : 'none';
    }
}

// Carregar p√°gina de erro
async function loadErrorPage(error) {
    const contentContainer = document.getElementById('page-content');
    if (contentContainer) {
        contentContainer.innerHTML = `
            <div class="error-page" style="text-align: center; padding: 40px 20px;">
                <div style="font-size: 4rem; margin-bottom: 20px;">‚ùå</div>
                <h2>Erro ao Carregar P√°gina</h2>
                <p style="color: #6b7280; margin: 20px 0;">${error.message}</p>
                <button class="btn btn-primary" onclick="location.reload()">
                    üîÑ Recarregar P√°gina
                </button>
                <button class="btn btn-secondary" onclick="loadPage('dashboard')">
                    üè† Ir para Dashboard
                </button>
            </div>
        `;
    }
}

// Fechar todos os modals
function closeAllModals() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

// Fun√ß√µes utilit√°rias
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

// Fun√ß√£o global para mostrar alertas
window.showAlert = function(message, type = 'success', duration = 5000) {
    const alertContainer = document.getElementById('alert-container');
    
    if (!alertContainer) {
        console.warn('Container de alertas n√£o encontrado');
        return;
    }
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.textContent = message;
    
    alertContainer.appendChild(alert);
    
    // Auto-remover ap√≥s o tempo especificado
    setTimeout(() => {
        if (alert.parentNode) {
            alert.remove();
        }
    }, duration);
    
    console.log(`üì¢ Alerta: ${message} (${type})`);
};

// Fun√ß√£o global para fechar modal
window.closeModal = function(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
};

// Fun√ß√£o para verificar status do sistema
window.checkSystemStatus = async function() {
    const status = {
        backend: await checkBackendAvailability(),
        currentPage: AppState.currentPage,
        isLoading: AppState.isLoading
    };
    
    console.log('üìä Status do sistema:', status);
    return status;
};

// Fun√ß√£o para recarregar p√°gina atual
window.reloadCurrentPage = async function() {
    console.log('üîÑ Recarregando p√°gina atual...');
    
    try {
        await loadPage(AppState.currentPage, false);
        showAlert('P√°gina recarregada com sucesso!', 'success');
    } catch (error) {
        console.error('Erro ao recarregar p√°gina:', error);
        showAlert('Erro ao recarregar p√°gina', 'error');
    }
};

// Fun√ß√£o para diagnosticar problemas
window.diagnoseProblem = async function() {
    console.log('üîç Iniciando diagn√≥stico...');
    
    const diagnostics = {
        timestamp: new Date().toISOString(),
        url: window.location.href,
        userAgent: navigator.userAgent,
        currentPage: AppState.currentPage,
        backendAvailable: await checkBackendAvailability(),
        elementsPresent: {
            pageContent: !!document.getElementById('page-content'),
            loadingOverlay: !!document.getElementById('loading-overlay'),
            alertContainer: !!document.getElementById('alert-container')
        },
        scriptsLoaded: Array.from(document.querySelectorAll('script')).map(s => s.src),
        errors: []
    };
    
    // Testar APIs b√°sicas
    try {
        if (window.Utils) {
            diagnostics.utilsAvailable = true;
            // Testar fun√ß√£o de c√°lculo
            const testResult = Utils.calcularLucros({}, []);
            diagnostics.calculationWorks = !!testResult;
        }
    } catch (error) {
        diagnostics.errors.push(`Utils error: ${error.message}`);
    }
    
    try {
        if (window.VendaService) {
            diagnostics.vendaServiceAvailable = true;
        }
    } catch (error) {
        diagnostics.errors.push(`VendaService error: ${error.message}`);
    }
    
    console.log('üîç Diagn√≥stico completo:', diagnostics);
    
    // Mostrar resumo do diagn√≥stico
    const problemas = diagnostics.errors.length > 0 ? 
        diagnostics.errors.join(', ') : 'Nenhum problema detectado';
    
    showAlert(`Diagn√≥stico: ${problemas}`, diagnostics.errors.length > 0 ? 'warning' : 'success');
    
    return diagnostics;
};

// Fun√ß√£o para reinicializar aplica√ß√£o
window.reinitializeApp = async function() {
    console.log('üîÑ Reinicializando aplica√ß√£o...');
    
    try {
        // Limpar estado
        AppState.currentPage = 'dashboard';
        AppState.isLoading = false;
        AppState.data = { resumo: null, vendas: [], despesas: [], postes: [] };
        
        // Limpar timers
        clearPageTimers();
        
        // Remover scripts de p√°gina
        removePageScripts();
        
        // Reinicializar
        await initializeApp();
        
        showAlert('Aplica√ß√£o reinicializada com sucesso!', 'success');
        
    } catch (error) {
        console.error('Erro ao reinicializar:', error);
        showAlert('Erro ao reinicializar aplica√ß√£o', 'error');
    }
};

// Configurar atalhos de teclado para debug
document.addEventListener('keydown', (e) => {
    // Ctrl + Shift + D para diagn√≥stico
    if (e.ctrlKey && e.shiftKey && e.key === 'D') {
        e.preventDefault();
        diagnoseProblem();
    }
    
    // Ctrl + Shift + R para reinicializar
    if (e.ctrlKey && e.shiftKey && e.key === 'R') {
        e.preventDefault();
        reinitializeApp();
    }
    
    // Ctrl + Shift + S para status
    if (e.ctrlKey && e.shiftKey && e.key === 'S') {
        e.preventDefault();
        checkSystemStatus();
    }
});

// Monitorar mudan√ßas de conectividade
window.addEventListener('online', () => {
    console.log('üåê Conex√£o restaurada');
    showAlert('Conex√£o com a internet restaurada', 'success');
    checkBackendAvailability();
});

window.addEventListener('offline', () => {
    console.log('üì° Conex√£o perdida');
    showAlert('Conex√£o com a internet perdida', 'warning');
});

// Exportar configura√ß√µes para uso em outros scripts
window.CONFIG = CONFIG;
window.AppState = AppState;
window.loadPage = loadPage;

// Log de inicializa√ß√£o
console.log('‚úÖ Main.js carregado - vers√£o melhorada com diagn√≥sticos');
console.log('üîß Atalhos dispon√≠veis:');
console.log('   Ctrl+Shift+D = Diagn√≥stico');
console.log('   Ctrl+Shift+R = Reinicializar');
console.log('   Ctrl+Shift+S = Status do sistema');